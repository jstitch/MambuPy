stages:
  - "lint"
  - "UnitTests"
  - "deploy"

Linter:
  stage: lint
  script:
    - pip install -q --no-cache-dir pylint
    - find ./MambuPy -iname "*.py" | xargs pylint --disable=all --enable=trailing-whitespace,trailing-newlines,missing-final-newline --output-format=parseable
    - find ./tests -iname "*.py" | xargs pylint --disable=all --enable=trailing-whitespace,trailing-newlines,missing-final-newline --output-format=parseable

.UnitTests:
  artifacts:
    paths:
      - htmlcov_${CI_PROJECT_NAME}_$PYVERSION.tar.bz2
      - coverage_${CI_PROJECT_NAME}_$PYVERSION.xml
    expire_in: 1 day
  before_script:
    - pip install -q --no-cache-dir --upgrade -r requirements.txt
  script:
    - rm -f .coverage
    - rm -rf htmlcov
    - rm -f coverage.xml
    - coverage run --append --rcfile=./.coveragerc tests/unit_mambustruct.py
    - coverage run --append --rcfile=./.coveragerc tests/unit_mambuconfig.py
    - coverage run --append --rcfile=./.coveragerc tests/unit_mambuutil.py
    - coverage run --append --rcfile=./.coveragerc tests/unit_mambutask.py
    - coverage run --append --rcfile=./.coveragerc tests/unit_mamburoles.py
    - coverage run --append --rcfile=./.coveragerc tests/unit_mambuuser.py
    - coverage run --append --rcfile=./.coveragerc tests/unit_mambuloan.py
    - coverage run --append --rcfile=./.coveragerc tests/unit_mambuactivity.py
    - coverage run --append --rcfile=./.coveragerc tests/unit_mambubranch.py
    - coverage run --append --rcfile=./.coveragerc tests/unit_mambucentre.py
    - coverage run --append --rcfile=./.coveragerc tests/unit_mambuclient.py
    - coverage run --append --rcfile=./.coveragerc tests/unit_mamburepayment.py
    - coverage run --append --rcfile=./.coveragerc tests/unit_mambutransaction.py
    - coverage run --append --rcfile=./.coveragerc tests/unit_mambugroup.py
    - coverage run --append --rcfile=./.coveragerc tests/unit_mambuproduct.py
    - coverage html
    - mv htmlcov htmlcov_${CI_PROJECT_NAME}_$PYVERSION
    - tar cjf htmlcov_${CI_PROJECT_NAME}_$PYVERSION.tar.bz2 htmlcov_${CI_PROJECT_NAME}_$PYVERSION
    - coverage xml
    - mv coverage.xml coverage_${CI_PROJECT_NAME}_$PYVERSION.xml
    - coverage report

UnitTests-3:
  extends: ".UnitTests"
  stage: "UnitTests"
  variables:
    PYVERSION: "3"
  image: "python:3"

UnitTests-2:
  extends: ".UnitTests"
  stage: "UnitTests"
  variables:
    PYVERSION: "2"
  image: "python:2"

.deploy:
  script:
    - cd ..
    # comprime el codigo de la version actual
    - tar czf /tmp/$ENV_NAME-$CI_COMMIT_SHORT_SHA.tar.gz $CI_PROJECT_NAME
    # crea la estructura de directorios donde se guardara la liberacion
    - ssh root@$SERVER "mkdir -p $DEPLOY_ROOT_PATH/$ENV_NAME-$CI_PROJECT_NAME/$CI_COMMIT_SHORT_SHA && exit"
    # sube el archivo comprimido al servidor
    - rsync /tmp/$ENV_NAME-$CI_COMMIT_SHORT_SHA.tar.gz root@$SERVER:$DEPLOY_ROOT_PATH/$ENV_NAME-$CI_PROJECT_NAME/$CI_COMMIT_SHORT_SHA/
    # descomprime el archivo en el servidor
    - ssh root@$SERVER "cd $DEPLOY_ROOT_PATH/$ENV_NAME-$CI_PROJECT_NAME/$CI_COMMIT_SHORT_SHA && tar xzf $ENV_NAME-$CI_COMMIT_SHORT_SHA.tar.gz && exit"
    # instala el cambio en el servidor
    - ssh root@$SERVER "cd $DEPLOY_ROOT_PATH/$ENV_NAME-$CI_PROJECT_NAME/$CI_COMMIT_SHORT_SHA/$CI_PROJECT_NAME && rsync -avz MambuPy/* $PODEMOS_PATH/lib/python/mambupy/ && exit"

deploy-watson:
  extends: ".deploy"
  stage: "deploy"
  environment: watson_server
  image: "jstitch/mambupy:py2"
  only:
    - master_podemos
    # llama asi al branch para hacer pruebas de este stage...
    - gitlab_ci
  variables:
    ENV_NAME: "staging"
    SERVER: "watson"
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_WATSON_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_WATSON_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # publica el reporte de coverage
    - sed -i 's/\/builds\/podemos-ti\/mambupy\///g' coverage_${CI_PROJECT_NAME}_2.xml
    - sed -i 's/\/builds\/podemos-ti\/mambupy\///g' coverage_${CI_PROJECT_NAME}_3.xml
    - rsync coverage_${CI_PROJECT_NAME}_2.xml root@$SERVER:/var/www/
    - rsync coverage_${CI_PROJECT_NAME}_3.xml root@$SERVER:/var/www/
    - rsync htmlcov_${CI_PROJECT_NAME}_2.tar.bz2 root@$SERVER:/var/www
    - rsync htmlcov_${CI_PROJECT_NAME}_3.tar.bz2 root@$SERVER:/var/www
    - ssh root@$SERVER "cd /var/www && rm -rf htmlcov_${CI_PROJECT_NAME}_2 && tar xjvf htmlcov_${CI_PROJECT_NAME}_2.tar.bz2 && rm htmlcov_${CI_PROJECT_NAME}_2.tar.bz2 && exit"
    - ssh root@$SERVER "cd /var/www && rm -rf htmlcov_${CI_PROJECT_NAME}_3 && tar xjvf htmlcov_${CI_PROJECT_NAME}_3.tar.bz2 && rm htmlcov_${CI_PROJECT_NAME}_3.tar.bz2 && exit"
  after_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_WATSON_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_WATSON_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # sonarqube scan
    - ssh root@$SERVER "cd $DEPLOY_ROOT_PATH/staging-$CI_PROJECT_NAME/$CI_COMMIT_SHORT_SHA/$CI_PROJECT_NAME && /usr/local/share/sonar-scanner/bin/sonar-scanner -Dsonar.login=$SONARQUBE_LOGIN_KEY && exit"
    # reinicia servicios para cargar los cambios
    - ssh root@$SERVER "systemctl reload apache2 && exit"
    # limpia la basura (deja el comprimido, quita el resto que ocupa espacio innecesario)
    - ssh root@$SERVER "rm -rf $DEPLOY_ROOT_PATH/$ENV_NAME-$CI_PROJECT_NAME/$CI_COMMIT_SHORT_SHA/$CI_PROJECT_NAME && exit"
